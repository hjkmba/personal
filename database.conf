input {
    file {
        type => "database_hsrddb1"
        path => "/data/ejvqa/logFile/test/database/*/*"
        exclude => "*.gz"
        start_position => "beginning"
        sincedb_path => "/home/users/qa/performance/elastic/sincedb/database_hsrddb1"
        # sincedb_path => "/dev/null"
    }
}

filter {
        if "database_hsrddb1" in [type] {
            grok {
                match => ["path", "/data/ejvqa/logFile/test/database/%{WORD:env}/%{WORD:server}"]
                break_on_match => false
            }
            grok {
                    match => { "message" => "%{GREEDYDATA:record_time}\|%{NOTSPACE:duration}\|%{NOTSPACE:cpu_busy}\|%{NOTSPACE:io_busy}\|%{NOTSPACE:idle}\|%{NOTSPACE:packets_received}\|%{NOTSPACE:packets_sent}\|%{NOTSPACE:packet_errors}\|%{NOTSPACE:total_read}\|%{NOTSPACE:total_write}\|%{NOTSPACE:total_errors}\|%{NOTSPACE:connections}\|%{NOTSPACE:dead_lock_count}\|%{NOTSPACE:lock_count}" }
            }
            date {
                match => [ "record_time" , "ISO8601" , "YYYY MMM dd HH:mm:ss"]
                target => "@timestamp"
                timezone => "EST5EDT"
            }
            date {
                match => [ "record_time" , "ISO8601" , "YYYY MMM dd HH:mm:ss"]
                target => "record_time"
                timezone => "EST5EDT"
            }
            mutate {
                convert => ["duration","integer"]
                convert => ["cpu_busy","integer"]
                convert => ["io_busy","integer"]
                convert => ["idle","integer"]
                convert => ["packets_received","integer"]
                convert => ["packets_sent","integer"]
                convert => ["packet_errors","integer"]
                convert => ["total_read","integer"]
                convert => ["total_write","integer"]
                convert => ["total_errors","integer"]
                convert => ["connections","integer"]
                convert => ["dead_lock_count","integer"]
                convert => ["lock_count","integer"]
            }
        }
}

output {
    elasticsearch {
        host => "us2d-ejvcap01.stp.ime.reuters.com"
        protocol => "http"
        port => 9200
        document_id => "%{server}%{+YYYYMMddHHmm}"
        index => "logstash-database-hsrddb1-%{+YYYY.MM}"
    }
    # stdout { codec => rubydebug }
}
